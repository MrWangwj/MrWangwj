<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奔跑的蜗牛</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangweijin.cn/"/>
  <updated>2020-07-11T17:03:44.229Z</updated>
  <id>http://wangweijin.cn/</id>
  
  <author>
    <name>奔跑的蜗牛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2. 两数相加</title>
    <link href="http://wangweijin.cn/2020/07/12/2020-07-12-1/"/>
    <id>http://wangweijin.cn/2020/07/12/2020-07-12-1/</id>
    <published>2020-07-11T16:37:10.000Z</published>
    <updated>2020-07-11T17:03:44.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h1><p>LeetCode题目<a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">《两数相加》</a></p><p>给出两个<strong>非空</strong>的链表用来表示两个非负的整数。其中，它们各自的位数是按照<strong>逆序</strong>的方式存储的，并且它们的每个节点只能存储<strong>一位</strong>数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字0之外，这两个数都不会以0开头。</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 = 807</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode &#123;</span><br><span class="line">if l1 == nil &amp;&amp; l2 == nil &#123;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line">var (</span><br><span class="line">l = new(ListNode)</span><br><span class="line">n, sum int</span><br><span class="line">)</span><br><span class="line">result := l</span><br><span class="line">for &#123;</span><br><span class="line">sum = n</span><br><span class="line"></span><br><span class="line">if l1 != nil &#123;</span><br><span class="line">sum += l1.Val</span><br><span class="line">l1 = l1.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if l2 != nil &#123;</span><br><span class="line">sum += l2.Val</span><br><span class="line">l2 = l2.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n  = sum / 10</span><br><span class="line">l.Val = sum % 10</span><br><span class="line"></span><br><span class="line">if n == 0 &#123;</span><br><span class="line">if l1 == nil &amp;&amp; l2 == nil &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if l1 != nil &amp;&amp; l2 == nil &#123;</span><br><span class="line">l.Next = l1</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if l2 != nil &amp;&amp; l1 == nil &#123;</span><br><span class="line">l.Next = l2</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">l.Next = new(ListNode)</span><br><span class="line">l = l.Next</span><br><span class="line">&#125;</span><br><span class="line">return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、思路"><a href="#三、思路" class="headerlink" title="三、思路"></a>三、思路</h2><ul><li>加法器的思路，个位与个位相加，逢十进一</li><li>当其中1个链表为空并且没有进位，可以直接用第二个链表<code>Next</code>附加到最终值</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、题目&quot;&gt;&lt;a href=&quot;#一、题目&quot; class=&quot;headerlink&quot; title=&quot;一、题目&quot;&gt;&lt;/a&gt;一、题目&lt;/h1&gt;&lt;p&gt;LeetCode题目&lt;a href=&quot;https://leetcode-cn.com/problems/add-two-numbers/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《两数相加》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给出两个&lt;strong&gt;非空&lt;/strong&gt;的链表用来表示两个非负的整数。其中，它们各自的位数是按照&lt;strong&gt;逆序&lt;/strong&gt;的方式存储的，并且它们的每个节点只能存储&lt;strong&gt;一位&lt;/strong&gt;数字。&lt;/p&gt;
&lt;p&gt;如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。&lt;/p&gt;
&lt;p&gt;您可以假设除了数字0之外，这两个数都不会以0开头。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：(2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：7 -&amp;gt; 0 -&amp;gt; 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;原因：342 + 465 = 807&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://wangweijin.cn/categories/LeetCode/"/>
    
    
      <category term="链表" scheme="http://wangweijin.cn/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="数学" scheme="http://wangweijin.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>浅谈JavaScript参数传递</title>
    <link href="http://wangweijin.cn/2018/07/22/2018-7-22-1/"/>
    <id>http://wangweijin.cn/2018/07/22/2018-7-22-1/</id>
    <published>2018-07-22T02:40:07.000Z</published>
    <updated>2020-01-20T10:14:11.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在书本中大家都学到的参数传递有两种: 按值传递和按址传递, 下面我们就来说一下 JavaScript 中的传递</p></blockquote><p>按值传递非常好理解, 就不说了, 我们说一下 JavaScript 中对象的传递</p><p>前两天做了一道前端面试题, 感觉比较有趣, 特分享一下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setPerson = <span class="function"><span class="keyword">function</span>(<span class="params">person</span>)</span>&#123;</span><br><span class="line">    person.name = <span class="string">"kevin"</span>;</span><br><span class="line">    person = &#123;<span class="attr">name</span>:<span class="string">"rick"</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>:<span class="string">"alan"</span>&#125;;</span><br><span class="line">setPerson(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出 kevin</span></span><br></pre></td></tr></table></figure></p><p>我在做这道题时知道 <code>person.name = &#39;kevin&#39;</code> 是可以改变外面 <code>person</code> 对象的值, 所以当时也认为 <code>person = {name: &#39;rick&#39;}</code> 是可以改变的, 后来知道答案后感觉非常不可思议, 废了些功夫去理解一番</p><p>先来看个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    name: <span class="string">'小王'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出 &#123;name:'小王'&#125;</span></span><br></pre></td></tr></table></figure><p>我们知道 JavaScript 中的对象是引用对象, 所以 <code>a</code> 中存储的是对象的内存地址, 而对象存储在堆中, <code>var b = a;</code> 实际是将 <code>b</code> 的值设置为 <code>a</code> 对象中存储的地址, 再将 <code>b</code>设置为空对象 <code>null</code> , 也是将 <code>b</code> 的值改为空对象的栈内存地址, 所以说 <code>b</code> 的改变影响不到 <code>a</code>  </p><p>通过上面的分析, 我们再回到题中, 向 <code>setPerson()</code> 函数中传递了一个对象, 可以看作是用外面的 <code>person</code> 对象赋值给 <code>setPerson()</code> 中的 <code>person</code> 局部对象, <code>setPerson()</code> 中的 <code>person</code> 对象只是指向了外面 <code>person</code>对象的地址, 当执行 <code>person.name = &quot;kevin&quot;</code> 时会根据对象地址访问对象, 然后修改 <code>name</code> 的值, 外面的<code>person</code>也就改变了, 但当执行 <code>person = {name:&quot;rick&quot;};</code> 时, 是拿 <code>setPerson()</code> 中指向新的对象地址, 不会修改原来的对象</p><p>到此, 我们也就明白了对象的参数传递, 暂时没弄清这是按址传递还是按值传递, 也有人说是共享传递, 不过, 我们明白原理就好, 另外, Java 中也存在这种情况</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在书本中大家都学到的参数传递有两种: 按值传递和按址传递, 下面我们就来说一下 JavaScript 中的传递&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;按值传递非常好理解, 就不说了, 我们说一下 JavaScript 中对象的传递&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://wangweijin.cn/categories/JavaScript/"/>
    
    
      <category term="参数传递" scheme="http://wangweijin.cn/tags/%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/"/>
    
  </entry>
  
  <entry>
    <title>MySQL中的事务及隔离级别</title>
    <link href="http://wangweijin.cn/2018/04/18/2018-4-18-1/"/>
    <id>http://wangweijin.cn/2018/04/18/2018-4-18-1/</id>
    <published>2018-04-18T03:05:23.000Z</published>
    <updated>2020-01-20T10:14:11.418Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MySQL中InnoDB 和 MyISAM存储引擎最大的区别是InnoDB支持事务和InnoDB为行级锁、MyISAM为表级锁</p></blockquote><h4 id="一、MySQL事务及其ACID属性"><a href="#一、MySQL事务及其ACID属性" class="headerlink" title="一、MySQL事务及其ACID属性"></a>一、MySQL事务及其ACID属性</h4><a id="more"></a><ul><li>原子性(Actomicity)：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。</li><li>一致性（Consistent）：在事务开始和完成时，数据都必须保持一致状态。这意味着所有相关的数据规则都必须应用于事务的修改，以操持完整性；事务结束时，所有的内部数据结构（如B树索引或双向链表）也都必须是正确的。</li><li>隔离性（Isolation）：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。这意味着事务处理过程中的中间状态对外部是不可见的，反之亦然。</li><li>持久性（Durable）：事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。<h4 id="二、MySQL并行事务可能出现的问题"><a href="#二、MySQL并行事务可能出现的问题" class="headerlink" title="二、MySQL并行事务可能出现的问题"></a>二、MySQL并行事务可能出现的问题</h4></li><li><strong>更新丢失：</strong>当两个或者多个事务选中同一行数据修改，由于不知道其他事务的存在，在事务提交后可能会发生更新丢失问题——最后的更新覆盖了其他事务所做的更新。</li><li><strong>脏读：</strong>一个事务正在对一条记录做修改，在这个事务并提交前，这条记录的数据就处于不一致状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”的数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象地叫做“脏读”。</li><li><strong>不可重复读：</strong>是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。</li><li><strong>幻读：</strong> 一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读”。例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行。</li></ul><h4 id="三、事务的隔离级别"><a href="#三、事务的隔离级别" class="headerlink" title="三、事务的隔离级别"></a>三、事务的隔离级别</h4><table><thead><tr><th style="text-align:left">隔离级别</th><th style="text-align:center">脏读</th><th style="text-align:center">不可重复读</th><th style="text-align:center">幻读</th></tr></thead><tbody><tr><td style="text-align:left">Read uncommitted 读未提交</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:left">Read committed 读提交</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:left">Repeatable read 重复读</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">√</td></tr><tr><td style="text-align:left">Serializable 序列化</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr></tbody></table><p>参考： <a href="https://blog.csdn.net/jiesa/article/details/51317164" target="_blank" rel="noopener"> 数据库事务隔离级别– 脏读、幻读、不可重复读清晰解释 </a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;MySQL中InnoDB 和 MyISAM存储引擎最大的区别是InnoDB支持事务和InnoDB为行级锁、MyISAM为表级锁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;一、MySQL事务及其ACID属性&quot;&gt;&lt;a href=&quot;#一、MySQL事务及其ACID属性&quot; class=&quot;headerlink&quot; title=&quot;一、MySQL事务及其ACID属性&quot;&gt;&lt;/a&gt;一、MySQL事务及其ACID属性&lt;/h4&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://wangweijin.cn/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL中MyISAM存储引擎和InnoDB存储引擎的区别</title>
    <link href="http://wangweijin.cn/2018/04/17/2018-4-17-1/"/>
    <id>http://wangweijin.cn/2018/04/17/2018-4-17-1/</id>
    <published>2018-04-17T11:20:23.000Z</published>
    <updated>2020-01-20T10:14:11.418Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://blog.csdn.net/xlgen157387/article/details/68978320" target="_blank" rel="noopener"> MySQL存储引擎MyISAM与InnoDB区别总结整理</a></p><h3 id="一、区别"><a href="#一、区别" class="headerlink" title="一、区别"></a>一、区别</h3><ol><li>InnoDB支持事务；MyISAM不支持事务。</li><li>InnoDB支持外键；MyISAM不支持外键。</li><li>InnoDB锁的粒度是行锁；MyISAM锁的粒度是表锁。</li><li>InnoDB把数据和索引存在一起；MyISAM把表分为三个文件：表结构(.frm)、表内容(MYD)、表索引(MYI)。</li><li>InnoDB不保存表的具体行数，需要通过扫描表来获取有多少行；MyISAM保存表的具体行数。</li><li>InnoDB删除表中数据时是一行一行的删除；MyISAM删除表时是先<code>drop</code>表，然后重建表。</li><li>InnoDB可跨平台拷贝直接使用；MyISAM很难跨平台直接使用。</li><li>InnoDB表格很难压缩；MyISAM表格可以被压缩。</li><li>InnoDB中必须包含只有该字段的索引；MyISAM表中可以和其他字段一起建立联合索引。</li></ol><a id="more"></a><p><strong>注意：</strong> InnoDB表的行锁也不是绝对的，假如在执行一个SQL语句时MySQL不能确定要扫描的范围，InnoDB表同样会锁全表，例如：<br><code>update table set num=1 where name like &#39;a%&#39;</code></p><h3 id="二、选择"><a href="#二、选择" class="headerlink" title="二、选择"></a>二、选择</h3><p><strong>MyISAM：</strong>  适用于不使用事务，对表读多写少的场景。<br><strong>InnoDB：</strong>  适用于可靠性要求比较高，或者要求事务，对表的写操作较多的场景。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;a href=&quot;https://blog.csdn.net/xlgen157387/article/details/68978320&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; MySQL存储引擎MyISAM与InnoDB区别总结整理&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;一、区别&quot;&gt;&lt;a href=&quot;#一、区别&quot; class=&quot;headerlink&quot; title=&quot;一、区别&quot;&gt;&lt;/a&gt;一、区别&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;InnoDB支持事务；MyISAM不支持事务。&lt;/li&gt;
&lt;li&gt;InnoDB支持外键；MyISAM不支持外键。&lt;/li&gt;
&lt;li&gt;InnoDB锁的粒度是行锁；MyISAM锁的粒度是表锁。&lt;/li&gt;
&lt;li&gt;InnoDB把数据和索引存在一起；MyISAM把表分为三个文件：表结构(.frm)、表内容(MYD)、表索引(MYI)。&lt;/li&gt;
&lt;li&gt;InnoDB不保存表的具体行数，需要通过扫描表来获取有多少行；MyISAM保存表的具体行数。&lt;/li&gt;
&lt;li&gt;InnoDB删除表中数据时是一行一行的删除；MyISAM删除表时是先&lt;code&gt;drop&lt;/code&gt;表，然后重建表。&lt;/li&gt;
&lt;li&gt;InnoDB可跨平台拷贝直接使用；MyISAM很难跨平台直接使用。&lt;/li&gt;
&lt;li&gt;InnoDB表格很难压缩；MyISAM表格可以被压缩。&lt;/li&gt;
&lt;li&gt;InnoDB中必须包含只有该字段的索引；MyISAM表中可以和其他字段一起建立联合索引。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://wangweijin.cn/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>水管工游戏</title>
    <link href="http://wangweijin.cn/2018/03/29/2018-03-29-1/"/>
    <id>http://wangweijin.cn/2018/03/29/2018-03-29-1/</id>
    <published>2018-03-29T13:41:50.000Z</published>
    <updated>2020-01-20T10:14:11.418Z</updated>
    
    <content type="html"><![CDATA[<p>参考：《啊哈！算法》</p><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p>水管工游戏是指如下图中的矩阵中，一共有两种管道，一个是直的，一个是弯的，所有管道都可以自由旋转，最终就是要连通入水口可出水口。其中的树为障碍物。</p><p><img src="https://img-blog.csdn.net/20180329215647632?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21yd2FuZ3dlaWppbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><a id="more"></a><p><img src="https://img-blog.csdn.net/20180329215700719?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21yd2FuZ3dlaWppbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h2 id="2、算法思路"><a href="#2、算法思路" class="headerlink" title="2、算法思路"></a>2、算法思路</h2><p>本题使用的是深度优先搜索算法，先标识入水口方向，在每次探索新管道的时候上根据入水口方向进行扩展，然后根据管道的类型来判断下一个节点的入水口方向。</p><h2 id="3、代码"><a href="#3、代码" class="headerlink" title="3、代码"></a>3、代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 搜索.广度优先搜索BFS.水管工游戏;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] map;         <span class="comment">//存储管道图</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> n, m, top;       <span class="comment">//管道的矩阵x，y， top栈顶元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span>[][] status;  <span class="comment">//是否已使用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] stack;      <span class="comment">//栈</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 坐标x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y 坐标y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> direction 进水口方向：1上、2右、3下、4左</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> direction)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == n-<span class="number">1</span> &amp;&amp; y == m)&#123;     <span class="comment">//如果到出口的下一个则表示完成一条路径</span></span><br><span class="line">            System.out.println(<span class="string">"搜索到连通路线"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top;i++)&#123;</span><br><span class="line">                System.out.print(stack[i]+<span class="string">"-&gt;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(y &lt; <span class="number">0</span> || x &lt; <span class="number">0</span>|| x &gt; n-<span class="number">1</span> || y &gt; m-<span class="number">1</span> || status[x][y])</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        status[x][y] = <span class="keyword">true</span>;</span><br><span class="line">        stack[top] = <span class="string">"("</span>+(x+<span class="number">1</span>)+<span class="string">","</span>+(y+<span class="number">1</span>)+<span class="string">","</span>+direction+<span class="string">")"</span>;     <span class="comment">//入栈</span></span><br><span class="line">        top++;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">5</span> &lt;= map[x][y] &amp;&amp; map[x][y] &lt;= <span class="number">6</span>)&#123;      <span class="comment">//如果是直管道</span></span><br><span class="line">            <span class="keyword">switch</span> (direction)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    dfs(x+<span class="number">1</span>, y, direction);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    dfs(x, y-<span class="number">1</span>, direction);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    dfs(x-<span class="number">1</span>, y, direction);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    dfs(x, y+<span class="number">1</span>, direction);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (direction)&#123;     <span class="comment">//弯管道</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    dfs(x, y-<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">                    dfs(x, y+<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    dfs(x-<span class="number">1</span>, y, <span class="number">3</span>);</span><br><span class="line">                    dfs(x+<span class="number">1</span>, y, <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    dfs(x, y-<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">                    dfs(x, y+<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    dfs(x-<span class="number">1</span>, y, <span class="number">3</span>);</span><br><span class="line">                    dfs(x+<span class="number">1</span>, y, <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        status[x][y] = <span class="keyword">false</span>;</span><br><span class="line">        top--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] ages)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        n = scanner.nextInt();</span><br><span class="line">        m = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        map = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        status = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][m];</span><br><span class="line">        stack = <span class="keyword">new</span> String[n*m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">                map[i][j] = scanner.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 测试数据：</span></span><br><span class="line"><span class="comment"> 5 4</span></span><br><span class="line"><span class="comment"> 5 3 5 3</span></span><br><span class="line"><span class="comment"> 1 5 3 0</span></span><br><span class="line"><span class="comment"> 2 3 5 1</span></span><br><span class="line"><span class="comment"> 6 1 1 5</span></span><br><span class="line"><span class="comment"> 1 5 5 4</span></span><br><span class="line"><span class="comment"> 结果：</span></span><br><span class="line"><span class="comment"> 搜索到连通路线</span></span><br><span class="line"><span class="comment"> (1,1,4)-&gt;(1,2,4)-&gt;(2,2,1)-&gt;(3,2,1)-&gt;(3,3,4)-&gt;(3,4,4)-&gt;(4,4,1)-&gt;(5,4,1)-&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：《啊哈！算法》&lt;/p&gt;
&lt;h2 id=&quot;1、题目&quot;&gt;&lt;a href=&quot;#1、题目&quot; class=&quot;headerlink&quot; title=&quot;1、题目&quot;&gt;&lt;/a&gt;1、题目&lt;/h2&gt;&lt;p&gt;水管工游戏是指如下图中的矩阵中，一共有两种管道，一个是直的，一个是弯的，所有管道都可以自由旋转，最终就是要连通入水口可出水口。其中的树为障碍物。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180329215647632?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21yd2FuZ3dlaWppbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://wangweijin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="搜索" scheme="http://wangweijin.cn/tags/%E6%90%9C%E7%B4%A2/"/>
    
      <category term="BFS" scheme="http://wangweijin.cn/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>层层递进-广度优先搜索算法</title>
    <link href="http://wangweijin.cn/2018/03/28/2018-03-28-2/"/>
    <id>http://wangweijin.cn/2018/03/28/2018-03-28-2/</id>
    <published>2018-03-28T13:59:01.000Z</published>
    <updated>2020-01-20T10:14:11.418Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>广度优先搜索算法常用于通过队列求最短路径，下面只实现了搜索算法</p></blockquote><h2 id="1、算法思想"><a href="#1、算法思想" class="headerlink" title="1、算法思想"></a>1、算法思想</h2><p>广度优先搜索算法是通过一层一层的遍历的，遍历思想如下：<br>1、 选取根节点r<br>2、 遍历r的子节点，并计算根节点r到子节点的权值，注意的是当前节点的到根节点的权值等于当前节点的父节点到根节点的权值<br>3、 依次遍历所有节点<br>4、 所有节点只能遍历一遍，即当一个节点有两个父节点时，只能被一个父节点遍历</p><a id="more"></a><p>例子：先选定1节点，然后会遍历1的子节点2、3，并在遍历的时候计算2、3的权值，2的权值为1，3的权值为5，然后遍历2节点的子节点4、5，计算4、5的节点的权值为，节点4：1+7=8，节点5：1+5=6；之后遍历3节点的子节点，由于5节点已被2节点遍历，那么只遍历6号节点即可，最后其他的节点一次类推，直到遍历所有节点。</p><p><img src="https://img-blog.csdn.net/20180328220849171?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21yd2FuZ3dlaWppbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="图1"></p><h2 id="2、实现代码"><a href="#2、实现代码" class="headerlink" title="2、实现代码"></a>2、实现代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 搜索.广度优先搜索BFS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] G = &#123;    <span class="comment">//图</span></span><br><span class="line">            &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span> &#125;,</span><br><span class="line">            &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span> &#125;,</span><br><span class="line">            &#123; <span class="number">5</span>, <span class="number">3</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span> &#125;,</span><br><span class="line">            &#123; -<span class="number">1</span>, <span class="number">7</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, -<span class="number">1</span>, <span class="number">3</span>, -<span class="number">1</span>, -<span class="number">1</span> &#125;,</span><br><span class="line">            &#123; -<span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, -<span class="number">1</span> &#125;,</span><br><span class="line">            &#123; -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">7</span>, -<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">5</span>, -<span class="number">1</span> &#125;,</span><br><span class="line">            &#123; -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">7</span> &#125;,</span><br><span class="line">            &#123; -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span> &#125;,</span><br><span class="line">            &#123; -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">0</span> &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] status = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">9</span>];   <span class="comment">//是否被选中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BlockingQueue&lt;Node&gt; blockingQueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();     <span class="comment">//遍历队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Node&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();     <span class="comment">//保存节点的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] ages)</span></span>&#123;</span><br><span class="line">        Node node = <span class="keyword">new</span> Node(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        blockingQueue.add(node);</span><br><span class="line">        list.add(node);</span><br><span class="line">        status[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!blockingQueue.isEmpty())&#123;</span><br><span class="line">            Node node1 = blockingQueue.poll();      <span class="comment">// 获取队列首元素</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[node1.n-<span class="number">1</span>].length; i++)&#123;  <span class="comment">//循环当前节点的子节点，并排除遍历过的</span></span><br><span class="line">                <span class="keyword">if</span> (G[node1.n-<span class="number">1</span>][i] != <span class="number">0</span> &amp;&amp; G[node1.n-<span class="number">1</span>][i] != -<span class="number">1</span> &amp;&amp; !status[i])&#123;</span><br><span class="line">                    Node node2 = <span class="keyword">new</span> Node(i+<span class="number">1</span>, node1.n, node1.s+G[node1.n-<span class="number">1</span>][i]);</span><br><span class="line">                    blockingQueue.add(node2);</span><br><span class="line">                    list.add(node2);</span><br><span class="line">                    status[i] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Node node1: list)&#123;</span><br><span class="line">            System.out.println(node1.n+<span class="string">"-&gt;"</span>+node1.f+<span class="string">"-&gt;"</span>+node1.s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;   <span class="comment">//节点编号</span></span><br><span class="line">    <span class="keyword">int</span> f;   <span class="comment">//父节点的编号</span></span><br><span class="line">    <span class="keyword">int</span> s;   <span class="comment">//总权值</span></span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> n, <span class="keyword">int</span> f, <span class="keyword">int</span> s)&#123;</span><br><span class="line">        <span class="keyword">this</span>.f =f;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果</span></span><br><span class="line"><span class="comment">1-&gt;0-&gt;0</span></span><br><span class="line"><span class="comment">2-&gt;1-&gt;1</span></span><br><span class="line"><span class="comment">3-&gt;1-&gt;5</span></span><br><span class="line"><span class="comment">4-&gt;2-&gt;8</span></span><br><span class="line"><span class="comment">5-&gt;2-&gt;6</span></span><br><span class="line"><span class="comment">6-&gt;3-&gt;12</span></span><br><span class="line"><span class="comment">7-&gt;4-&gt;11</span></span><br><span class="line"><span class="comment">8-&gt;5-&gt;15</span></span><br><span class="line"><span class="comment">9-&gt;7-&gt;18</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;广度优先搜索算法常用于通过队列求最短路径，下面只实现了搜索算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1、算法思想&quot;&gt;&lt;a href=&quot;#1、算法思想&quot; class=&quot;headerlink&quot; title=&quot;1、算法思想&quot;&gt;&lt;/a&gt;1、算法思想&lt;/h2&gt;&lt;p&gt;广度优先搜索算法是通过一层一层的遍历的，遍历思想如下：&lt;br&gt;1、 选取根节点r&lt;br&gt;2、 遍历r的子节点，并计算根节点r到子节点的权值，注意的是当前节点的到根节点的权值等于当前节点的父节点到根节点的权值&lt;br&gt;3、 依次遍历所有节点&lt;br&gt;4、 所有节点只能遍历一遍，即当一个节点有两个父节点时，只能被一个父节点遍历&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://wangweijin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="搜索" scheme="http://wangweijin.cn/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>不撞南墙不回头-深度优先搜索算法</title>
    <link href="http://wangweijin.cn/2018/03/28/2018-03-28-1/"/>
    <id>http://wangweijin.cn/2018/03/28/2018-03-28-1/</id>
    <published>2018-03-28T00:53:17.000Z</published>
    <updated>2020-01-20T10:14:11.418Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>深度优先搜索属于图算法的一种，英文缩写为DFS即Depth First Search，主要用于穷举所有情况的题目，其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次.</p><p>今天介绍算法实现的两种形式，一种是通过数组交换位置、一种是通过数组保存元素是否被使用</p></blockquote><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 搜索.深度优先搜索DFS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;    <span class="comment">//统计数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组交换方式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == a.length-<span class="number">1</span>)&#123;    <span class="comment">//判断是否到达数组结尾</span></span><br><span class="line">            count++;</span><br><span class="line">            printArray(a);    </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; a.length; i++)&#123;</span><br><span class="line">            &#123;a[i] = a[n] ^ a[i];a[i] = a[n] ^ a[i];a[n] = a[n] ^ a[i];&#125;     <span class="comment">//交换位置</span></span><br><span class="line">            dfs1(a,n+<span class="number">1</span>);</span><br><span class="line">            &#123;a[i] = a[n] ^ a[i];a[i] = a[n] ^ a[i];a[n] = a[n] ^ a[i];&#125;     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组存储状态方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] status;   <span class="comment">//存储状态的数组   </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n == a.length)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            printArray(a);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(status[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                a[n] = i;</span><br><span class="line">                status[i] = <span class="number">1</span>;  <span class="comment">//1表示该数已被使用；0表示未使用</span></span><br><span class="line">                dfs2(a, n+<span class="number">1</span>);</span><br><span class="line">                status[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出排列结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++)&#123;</span><br><span class="line">            System.out.print(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] ages)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line">        <span class="comment">//方式一 需要初始排列下数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a.length; i++)</span><br><span class="line">            a[i-<span class="number">1</span>] = i;</span><br><span class="line">        dfs1(a, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        status = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>+<span class="number">1</span>];</span><br><span class="line">        dfs2(a, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;深度优先搜索属于图算法的一种，英文缩写为DFS即Depth First Search，主要用于穷举所有情况的题目，其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次.&lt;/p&gt;
&lt;p&gt;今天介绍算法实现的两种形式，一种是通过数组交换位置、一种是通过数组保存元素是否被使用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法" scheme="http://wangweijin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="搜索" scheme="http://wangweijin.cn/tags/%E6%90%9C%E7%B4%A2/"/>
    
      <category term="全排列" scheme="http://wangweijin.cn/tags/%E5%85%A8%E6%8E%92%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>交换两个变量的值</title>
    <link href="http://wangweijin.cn/2018/03/27/2018-03-27-01/"/>
    <id>http://wangweijin.cn/2018/03/27/2018-03-27-01/</id>
    <published>2018-03-27T07:33:36.000Z</published>
    <updated>2020-01-20T10:14:11.418Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>三种交换方法</p></blockquote><h2 id="1、通过中间变量交换"><a href="#1、通过中间变量交换" class="headerlink" title="1、通过中间变量交换"></a>1、通过中间变量交换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2、通过加减交换"><a href="#2、通过加减交换" class="headerlink" title="2、通过加减交换"></a>2、通过加减交换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该方法两数相加可能会超出int范围而损失精度</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    a = a + b;</span><br><span class="line">    b = a - b;</span><br><span class="line">    b = a - b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、通过异或交换"><a href="#3、通过异或交换" class="headerlink" title="3、通过异或交换"></a>3、通过异或交换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法是最高效的方法，也不会超出int的范围</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    a = a ^ b;</span><br><span class="line">    b = a ^ b;</span><br><span class="line">    a = a ^ b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;三种交换方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1、通过中间变量交换&quot;&gt;&lt;a href=&quot;#1、通过中间变量交换&quot; class=&quot;headerlink&quot; title=&quot;1、通过中间变量交换&quot;&gt;&lt;/a&gt;1、通过中间变量交换&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; tmp = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="算法" scheme="http://wangweijin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 安装 最新版本的 PHP</title>
    <link href="http://wangweijin.cn/2018/03/09/2018-03-09-1/"/>
    <id>http://wangweijin.cn/2018/03/09/2018-03-09-1/</id>
    <published>2018-03-09T08:20:19.000Z</published>
    <updated>2020-01-20T10:14:11.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.  准备工作"></a>1.  准备工作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//解决有可能存在的语言问题</span><br><span class="line">sudo apt install -y language-pack-en-base</span><br><span class="line">sudo locale-gen en_US.UTF-8</span><br><span class="line">export LANG=en_US.UTF-8</span><br><span class="line">export LC_ALL=en_US.UTF-8</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-添加最新的PHP源"><a href="#2-添加最新的PHP源" class="headerlink" title="2. 添加最新的PHP源"></a>2. 添加最新的PHP源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//添加php的仓库</span><br><span class="line">sudo apt-get install -y software-properties-common</span><br><span class="line"></span><br><span class="line">//中途按下回车,添加源</span><br><span class="line">sudo add-apt-repository ppa:ondrej/php</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h2 id="3-安装相应版本的PHP"><a href="#3-安装相应版本的PHP" class="headerlink" title="3. 安装相应版本的PHP"></a>3. 安装相应版本的PHP</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//这里以安装PHP7.2为例</span><br><span class="line">sudo apt-get install -y php7.2 php7.2-mysql php7.2-curl php7.2-xml php7.2-mcrypt php7.2-json php7.2-gd php7.2-mbstring</span><br></pre></td></tr></table></figure><p>OK,完成。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-准备工作&quot;&gt;&lt;a href=&quot;#1-准备工作&quot; class=&quot;headerlink&quot; title=&quot;1.  准备工作&quot;&gt;&lt;/a&gt;1.  准备工作&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//解决有可能存在的语言问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install -y language-pack-en-base&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo locale-gen en_US.UTF-8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export LANG=en_US.UTF-8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export LC_ALL=en_US.UTF-8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="教程" scheme="http://wangweijin.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="php" scheme="http://wangweijin.cn/tags/php/"/>
    
      <category term="ubuntu" scheme="http://wangweijin.cn/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 高效的存储IPv4地址 inet_aton   inet_ntoa</title>
    <link href="http://wangweijin.cn/2018/03/01/2018-03-01-1/"/>
    <id>http://wangweijin.cn/2018/03/01/2018-03-01-1/</id>
    <published>2018-03-01T07:10:33.000Z</published>
    <updated>2020-01-20T10:14:11.417Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>IPv4的地址人们通常使用的是varchar(15)列来存储IP地址。mysql可以使用无符号整数来存储，myql提供<code>inet_aton()</code>和<code>inet_ntoa()</code>来互相转换。</p></blockquote><p>使用 <code>inet_aton()</code> 存储IP地址可以使用无符号的<code>int</code> 就可以存储了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//创建数据库</span><br><span class="line">create table a(ip int unsigned);</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><img src="http://img.blog.csdn.net/20180301145758698?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXJ3YW5nd2Vpamlu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>使用 <code>inet_aton</code>向数据库中添加ip地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into a values(inet_aton(&apos;255.255.255.255&apos;)), (inet_aton(&apos;192.168.1.1&apos;));</span><br></pre></td></tr></table></figure></p><p><img src="http://img.blog.csdn.net/20180301150136405?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXJ3YW5nd2Vpamlu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>查询数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from a where ip=inet_aton(&apos;192.168.1.1&apos;);</span><br></pre></td></tr></table></figure></p><p><img src="http://img.blog.csdn.net/20180301150503516?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXJ3YW5nd2Vpamlu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>使用 <code>inet_aton()</code> 来显示数据</p><pre><code>select inet_ntoa(ip) from a;</code></pre><p><img src="http://img.blog.csdn.net/2018030115070916?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXJ3YW5nd2Vpamlu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>使用int来存储ip可以加快通过ip查找的速度。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;IPv4的地址人们通常使用的是varchar(15)列来存储IP地址。mysql可以使用无符号整数来存储，myql提供&lt;code&gt;inet_aton()&lt;/code&gt;和&lt;code&gt;inet_ntoa()&lt;/code&gt;来互相转换。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用 &lt;code&gt;inet_aton()&lt;/code&gt; 存储IP地址可以使用无符号的&lt;code&gt;int&lt;/code&gt; 就可以存储了。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//创建数据库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;create table a(ip int unsigned);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://wangweijin.cn/categories/mysql/"/>
    
    
      <category term="优化存储" scheme="http://wangweijin.cn/tags/%E4%BC%98%E5%8C%96%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>排序-快速排序</title>
    <link href="http://wangweijin.cn/2018/02/24/2018-02-24-3/"/>
    <id>http://wangweijin.cn/2018/02/24/2018-02-24-3/</id>
    <published>2018-02-24T13:26:59.000Z</published>
    <updated>2020-01-20T10:14:11.417Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-算法思路"><a href="#1-算法思路" class="headerlink" title="1. 算法思路"></a>1. 算法思路</h3><blockquote><p>快速排序是常用的、平均时间复杂度为 O(NlogN) 的排序算法</p><p>快速排序算法的思路是首先选取一个基准数，然后以这个数为基准，将数列中大于这个数的放到该数的右边，小于该数的放到左边，然后两边在各选一个基准数，再依次排序。</p></blockquote><a id="more"></a><h3 id="2-实现代码"><a href="#2-实现代码" class="headerlink" title="2. 实现代码"></a>2. 实现代码</h3><p>首先运用的事递归的方法，需要传入数组最左边的和最右边的下标，选取最左边的数为基准数，然后最右边的下标依次向前比较，直到遇到一个比基准书小的数或者当前左边下标大于右边下标时停止比较，然后最左边基准书依次向右边比较，直到遇到一个比基准数大的数或者当前左边下标大于右边下标时停止比较，交换两数的位置，继续从右边左边开始进行上述操作，直到左边下标等于右边下标，然后将基准数和左边下标对应的数交换位置，最后以<code>left</code>、<code>i-1</code>作为左边待排序序列，以<code>i+1</code>、<code>right</code>作为右边带排序序列继续用此方法排序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] nums;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = left,       <span class="comment">// 左边的哨兵</span></span><br><span class="line">                j = right,  <span class="comment">// 右边的哨兵</span></span><br><span class="line">                tmp = nums[left];   <span class="comment">//基准数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)&#123;</span><br><span class="line">            <span class="keyword">while</span> (tmp &lt;= nums[j] &amp;&amp; i &lt; j) j--;</span><br><span class="line">            <span class="keyword">while</span> (tmp &gt;= nums[i] &amp;&amp; i &lt; j) i++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</span><br><span class="line">                <span class="keyword">int</span> n = nums[i];</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                nums[j] = n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[left] = nums[i];</span><br><span class="line">        nums[i] = tmp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        quicksort(left, i-<span class="number">1</span>);</span><br><span class="line">        quicksort(i+<span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] ages)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        nums = <span class="keyword">new</span> <span class="keyword">int</span>[scanner.nextInt()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            nums[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        quicksort(<span class="number">0</span>, nums.length-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            System.out.print(nums[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-算法思路&quot;&gt;&lt;a href=&quot;#1-算法思路&quot; class=&quot;headerlink&quot; title=&quot;1. 算法思路&quot;&gt;&lt;/a&gt;1. 算法思路&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;快速排序是常用的、平均时间复杂度为 O(NlogN) 的排序算法&lt;/p&gt;
&lt;p&gt;快速排序算法的思路是首先选取一个基准数，然后以这个数为基准，将数列中大于这个数的放到该数的右边，小于该数的放到左边，然后两边在各选一个基准数，再依次排序。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法" scheme="http://wangweijin.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="http://wangweijin.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>PHP 中对象的复制</title>
    <link href="http://wangweijin.cn/2018/02/24/2018-02-24-2/"/>
    <id>http://wangweijin.cn/2018/02/24/2018-02-24-2/</id>
    <published>2018-02-24T11:44:05.000Z</published>
    <updated>2020-01-20T10:14:11.417Z</updated>
    
    <content type="html"><![CDATA[<p>PHP中的对象在复制是通过 <code>clone</code> 来复制对象的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> $s;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;s = ++<span class="keyword">self</span>::$n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a1 = <span class="keyword">new</span> A();</span><br><span class="line">$a1-&gt;s = <span class="number">-1</span>;</span><br><span class="line">$a2 = $a1;</span><br><span class="line"><span class="keyword">echo</span> $a1-&gt;s;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $a2-&gt;s;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出</span></span><br><span class="line"><span class="comment"> * -1</span></span><br><span class="line"><span class="comment"> * -1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">$a1 = <span class="keyword">new</span> A();</span><br><span class="line">$a2 = <span class="keyword">clone</span> $a1;</span><br><span class="line">$a1-&gt;s = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">echo</span> $a1-&gt;s;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $a2-&gt;s;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出</span></span><br><span class="line"><span class="comment"> * -1</span></span><br><span class="line"><span class="comment"> * 2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>说到 clone 复制，clone复制会对对象的所有属性执行一个浅复制。所有的引用属性 仍然会是一个指向原来的变量的引用，要想实现复制需要 <code>__clone</code> 魔术方法。<br>在下面例子的输出中可以看出，<code>a1</code> 在 <code>__clone</code> 方法中进行了<code>clone</code>,所以两个<code>b</code>中的<code>a1</code>值发生了变话，成为了两个不同的对象。而<code>a2</code>没有进行设置，所以值一样，还是同一个对象。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> $s;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;s = ++<span class="keyword">self</span>::$n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;s = ++ <span class="keyword">self</span>::$n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a1;</span><br><span class="line">    <span class="keyword">public</span> $a2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a1 = <span class="keyword">clone</span> <span class="keyword">$this</span>-&gt;a1;</span><br><span class="line">        <span class="comment">//$this-&gt;a2 = clone $this-&gt;a2;    //省略a2的复制</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$b1 = <span class="keyword">new</span> B();</span><br><span class="line">$b1-&gt;a1 = <span class="keyword">new</span> A();</span><br><span class="line">$b1-&gt;a2 = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line">$b2 = <span class="keyword">clone</span> $b1;</span><br><span class="line"></span><br><span class="line">var_dump($b1);</span><br><span class="line">var_dump($b2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    /Applications/MAMP/htdocs/PHP学习/面向对象/对象复制/demo2.php:31:</span></span><br><span class="line"><span class="comment">    object(B)[1]</span></span><br><span class="line"><span class="comment">      public 'a1' =&gt;</span></span><br><span class="line"><span class="comment">        object(A)[2]</span></span><br><span class="line"><span class="comment">          public 's' =&gt; int 1</span></span><br><span class="line"><span class="comment">      public 'a2' =&gt;</span></span><br><span class="line"><span class="comment">        object(A)[3]</span></span><br><span class="line"><span class="comment">          public 's' =&gt; int 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    /Applications/MAMP/htdocs/PHP学习/面向对象/对象复制/demo2.php:32:</span></span><br><span class="line"><span class="comment">    object(B)[4]</span></span><br><span class="line"><span class="comment">      public 'a1' =&gt;</span></span><br><span class="line"><span class="comment">        object(A)[5]</span></span><br><span class="line"><span class="comment">          public 's' =&gt; int 3</span></span><br><span class="line"><span class="comment">      public 'a2' =&gt;</span></span><br><span class="line"><span class="comment">        object(A)[3]</span></span><br><span class="line"><span class="comment">          public 's' =&gt; int 2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP中的对象在复制是通过 &lt;code&gt;clone&lt;/code&gt; 来复制对象的&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; $n = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; $s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;s = ++&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; A();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a1-&amp;gt;s = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a2 = $a1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $a1-&amp;gt;s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;br&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $a2-&amp;gt;s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 输出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * -1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * -1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; A();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a2 = &lt;span class=&quot;keyword&quot;&gt;clone&lt;/span&gt; $a1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a1-&amp;gt;s = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $a1-&amp;gt;s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;br&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $a2-&amp;gt;s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 输出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * -1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://wangweijin.cn/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://wangweijin.cn/tags/PHP/"/>
    
      <category term="对象复制" scheme="http://wangweijin.cn/tags/%E5%AF%B9%E8%B1%A1%E5%A4%8D%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo+GitHub搭建的个人博客 文件备份</title>
    <link href="http://wangweijin.cn/2018/02/24/2018-02-24-1/"/>
    <id>http://wangweijin.cn/2018/02/24/2018-02-24-1/</id>
    <published>2018-02-24T08:51:30.000Z</published>
    <updated>2020-01-20T10:14:11.417Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用hexo可以方便的搭建自己的个人博客，但是由于博客的 markdown 文件都放在本地。可能会容易丢失，备份起来也会很麻烦。本教程就是实现方便的文件备份。</p></blockquote><h1 id="1-hexo-GitHub-搭建个人博客"><a href="#1-hexo-GitHub-搭建个人博客" class="headerlink" title="1. hexo+GitHub 搭建个人博客"></a>1. hexo+GitHub 搭建个人博客</h1><a id="more"></a><p>搭建个人可博客的步骤就不在说了，网上很多，大家可自行查找。搭建完成后效果如下<br><img src="http://upload-images.jianshu.io/upload_images/8752497-5b33cbd869e7dc81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GitHub代码"></p><p><img src="http://upload-images.jianshu.io/upload_images/8752497-6379718aebafb34b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网站首页"></p><h1 id="2-在GitHub中创建-hexo-分支来存储本地-markdown-文件"><a href="#2-在GitHub中创建-hexo-分支来存储本地-markdown-文件" class="headerlink" title="2. 在GitHub中创建 hexo 分支来存储本地 markdown 文件"></a>2. 在GitHub中创建 hexo 分支来存储本地 markdown 文件</h1><p>在本地文件根目录创建 <code>.gitignore</code> 文件，若存在修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">.deploy*/</span><br><span class="line">public/</span><br><span class="line">db.json</span><br></pre></td></tr></table></figure></p><p>在本地文件根目录中初始化 git<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></p><p>创建分支hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure></p><p>提交到仓库，需要注意的事在提交之前要把themes目录下主题中的 <code>.git</code> 文件夹重命名或者删除，不然的话 git 会把主题当做子模块来处理。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &apos;init&apos;</span><br></pre></td></tr></table></figure></p><p>添加远程仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:MrWangwj/MrWangwj.github.io.git</span><br></pre></td></tr></table></figure></p><p>push 到远程分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure></p><h1 id="3-在另一台电脑上使用"><a href="#3-在另一台电脑上使用" class="headerlink" title="3. 在另一台电脑上使用"></a>3. 在另一台电脑上使用</h1><p>首先要克隆下这个项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:MrWangwj/MrWangwj.github.io.git</span><br></pre></td></tr></table></figure></p><p>进入博客目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd MrWangwj.github.io.git</span><br></pre></td></tr></table></figure></p><p>切换到博客文件分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hexo origin/hexo</span><br></pre></td></tr></table></figure></p><p>安装hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure></p><p>然后编辑、查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g    //编译</span><br><span class="line">hexo s    //浏览器查看 localhost:4000</span><br></pre></td></tr></table></figure></p><p>提交 git，若在提交过程中出现 <code>ERROR Deployer not found: git</code> 可执行 <code>npm install hexo-deployer-git --save</code> 后重新提交。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><p>在写了新 markdown 文件后提交 git<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &apos;新增博客&apos;</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure></p><p>到此，我们以后只要写完博客发布后记得 push 一下就能实现备份了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用hexo可以方便的搭建自己的个人博客，但是由于博客的 markdown 文件都放在本地。可能会容易丢失，备份起来也会很麻烦。本教程就是实现方便的文件备份。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-hexo-GitHub-搭建个人博客&quot;&gt;&lt;a href=&quot;#1-hexo-GitHub-搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;1. hexo+GitHub 搭建个人博客&quot;&gt;&lt;/a&gt;1. hexo+GitHub 搭建个人博客&lt;/h1&gt;
    
    </summary>
    
      <category term="教程" scheme="http://wangweijin.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo" scheme="http://wangweijin.cn/tags/hexo/"/>
    
      <category term="github" scheme="http://wangweijin.cn/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hello Word</title>
    <link href="http://wangweijin.cn/2018/02/07/2018-02-07-1/"/>
    <id>http://wangweijin.cn/2018/02/07/2018-02-07-1/</id>
    <published>2018-02-07T02:42:30.000Z</published>
    <updated>2020-01-20T10:14:11.417Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Hello word'</span>;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第一篇博客&quot;&gt;&lt;a href=&quot;#第一篇博客&quot; class=&quot;headerlink&quot; title=&quot;第一篇博客&quot;&gt;&lt;/a&gt;第一篇博客&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="test" scheme="http://wangweijin.cn/tags/test/"/>
    
  </entry>
  
</feed>
